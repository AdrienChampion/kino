;; Top node is `fault_conf` with takes two inputs:
;;   - a real signal `in`
;;   - an error flag `err_in`
;; and returns
;;   - a real signal `out`
;;   - an error flag `err_out`
;;
;; At each cycle the output signal gets closer to the last value of `in` when
;; there was no error, or a default value (`default`) if there is no such
;; value. The derivative of the output signal is limited by `max_deriv`.
;;
;; The saturation of the derivative of the output signal is performed by the
;; `sat_deriv: Real -> Real` system.
;;
;; The output error flag is raised and stays that way when the input error
;; flag has been true `err_thres` times. When this happens the input error is
;; *confirmed* and the value of out should be `default`.

;; const err_thres: int  = 7   ;
;; const max_deriv: real = 1.0 ;
;; const default:   real = 0.0 ;

(define-fun err_thres () Int 7)
(define-fun max_deriv () Real (/ 1 1))
(define-fun default () Real (/ 0 1))

(define-fun clamp ( (in Real) ) Real
  (ite (< in (- max_deriv))
    (- max_deriv)
    (ite (> in max_deriv)
      max_deriv
      in
    )
  )
)

;; node sat_deriv(in: real) returns (out: real) ;
;; let
;;   out = in -> (
;;     if in < pre out then (
;;       if (pre out) - in > max_deriv then (pre out) - max_deriv else in
;;     ) else (
;;       if in - pre out > max_deriv then (pre out) + max_deriv else in
;;     )
;;   ) ;
;; tel

(define-sys sat_deriv
  ( (in Real) (out Real) )
  (= (_ curr out) (_ curr in))
  (= (_ next out)
    (+
      (_ curr out)
      (clamp (- (_ next in) (_ curr out)))
    )
  )
  ()
)

;; node fault_conf (in: real ; err_in: bool)
;; returns (out: Real ; err_out: bool) ;
;; var cnt: int ; last_legal: real ;
;; let
;;   ;; `cnt` counts how many errors have happened so far.
;;   cnt = (if err_in then 1 else 0) + (0 -> pre cnt) ;
;;   ;; Output error flag is raised when `err_thres` errors have happened
;;   err_out = cnt >= err_thres ;
;;   ;; Remember the last non-error input value.
;;   last_legal = if err_in then (default -> pre last_legal) else in ;
;;   ;; Output signal follows the last legal value, or is default.
;;   out = if err_out then default else sat_deriv(last_legal) ;
;;
;;   ;; Does not hold, when error confirmed `out` takes the default value.
;;   (*%PROPERTY ( (in - out >= max_deriv) and (not err_in) ) => out = in ; *)
;;   (*%PROPERTY ( (in - out >= max_deriv) and (not err_in) ) => (
;;     if err_out then out = default else out = in)
;;   ) ; *)
;;
;; tel

(define-sys fault_conf
  ;; State.
  (
    ;; Input signal.
    (in Real)
    ;; Input error flag.
    (err_in Bool)
    ;; Memory counting the number of errors that occured.
    (cnt Int)
    ;; Last legal input value.
    (last_legal Real)
    ;; Output of `sat_deriv`.
    (out_sub Real)
    ;; Output signal.
    (out Real)
    ;; Output error flag.
    (err_out Bool)
  )
  ;; Init.
  (and
    (= (_ curr cnt) (ite (_ curr err_in) 1 0))
    (= (_ curr err_out) (>= (_ curr cnt) err_thres))
    (= (_ curr last_legal)
      (ite (_ curr err_in) default (_ curr in))
    )
    (= (_ curr out) (ite (_ curr err_out) default (_ curr out_sub)))
  )
  ;; Trans.
  (and
    (= (_ next cnt) (+ (ite (_ curr err_in) 1 0)) (_ curr cnt))
    (= (_ next err_out) (>= (_ next cnt) err_thres))
    (= (_ next last_legal)
      (ite (_ next err_in) (_ curr last_legal) (_ next in))
    )
    (= (_ next out) (ite (_ next err_out) default (_ next out_sub)))
  )
  ;; Parallel composition with `sat_deriv`.
  ( (sat_deriv (_ curr last_legal) (_ curr out_sub)) )
)


;; (*%PROPERTY ( (in - out >= max_deriv) and (not err_in) ) => out = in ; *)
(define-prop prop_1 fault_conf
  (=>
    (and
      (<= (- (_ curr in) (_ curr out)) max_deriv)
      (<= (- (_ curr out) (_ curr in)) max_deriv)
      (not (_ curr err_in))
    )
    (= (_ curr out) (_ curr in))
  )
)

;; (*%PROPERTY ( (in - out >= max_deriv) and (not err_in) ) => (
;;   if err_out then out = default else out = in)
;; ) ; *)
(define-prop prop_2 fault_conf
  (=>
    (and
      (<= (- (_ curr in) (_ curr out)) max_deriv)
      (<= (- (_ curr out) (_ curr in)) max_deriv)
      (not (_ curr err_in))
    )
    (ite (_ curr err_out)
      (= (_ curr out) default)
      (= (_ curr out) (_ curr in))
    )
  )
)

(define-rel rel_1 fault_conf
  (let ( (diff (- (_ next in) (_ curr out))) )
    (=>
      (= diff (clamp diff))
      (= (_ next out) (_ next in))
    )
  )
)

(define-rel rel_2 fault_conf
  (let ( (diff (- (_ next in) (_ curr out))) )
    (=>
      (and
        (not (_ next err_in))
        (= diff (clamp diff))
      )
      (= (_ next out) (_ next in))
    )
  )
)

(define-fun abs ( (in Real) ) Real
  (ite (< in 0.0) (- in) in)
)

(define-rel rel_3 fault_conf
  (let ( (diff (- (_ next in) (_ curr out))) )
    (=>
      (and
        (not (_ next err_in))
        (= diff (clamp diff))
      )
      (ite (_ next err_out)
        (or
          (= (_ next out) default)
          (<
            (abs (- default (_ next out)))
            (abs (- default (_ curr out)))
          )
        )
        (= (_ next out) (_ next in))
      )
    )
  )
)

;; Let's do this.
(verify fault_conf (prop_1 prop_2 rel_1 rel_2 rel_3))

