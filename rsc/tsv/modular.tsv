;; node a (in: bool) returns (out: int) ;
;; let
;;   out = (
;;    if in then 1 else 0
;;  ) -> (
;;    if in then pre out + 1 else pre out
;;  ) ;
;;  --%PROPERTY out >= 0 ;
;; tel

;; Defines a transition system from some initial and transition predicates.
(define-sys sys_a 
  ;; State signature.
  ( (in Bool) (out Int) )
  ;; Local definitions.
  ()
  ;; Init.
  (ite (_ state in) (= (_ state out) 1) (= (_ state out) 0))
  ;; Trans.
  (ite
    (_ next in)
    (= (_ next out) (+ (_ state out) 1))
    (= (_ next out) (_ state out))
  )
  ;; Composition.
  ()
)

;; Defines a property over a state.
(define-prop out_positive sys_a
  (>= (_ state out) 0)
)



;; node b (act, deact: bool) returns (out: int) ;
;; let
;;   out = a( act and pre not deact ) ;
;;   -- unguarded ~~~~~~~~~~~~^^^^^ See `oracle` below.
;;
;;   -- State relations.
;;     -- Property does not hold (missing `pre`).
;;     --%PROPERTY (act and not deact) => ( out = pre out + 1 ) ;
;; tel

;; Will be used as the value of the ungarded pre at init.
(declare-fun oracle () Bool)

(define-sys sys_b
  (
    ;; Traceable inputs/outputs as quoted idents.
    (       |input(b,act)| Bool)
    (     |input(b,deact)| Bool)
    (|pre(input(b,deact))| Bool)
    (      |output(b,out)| Int )
  )
  ;; Local variables.
  ( )
  ;; Init. Gives sense to the `pre deact`.
  (= (_ state |pre(input(b,deact))|) oracle)
  ;; Trans. Gives sense to the `pre deact`.
  (= (_ next |pre(input(b,deact))|) (_ state |input(b,deact)|))
  ;; Compose with
  (
    (sys_a
      ;; Actual parameter for the first svar of sys_a (unguarded `pre deact`).
      (and (_ state |input(b,act)|) (not (_ state |pre(input(b,deact))|)))
      ;; Actual paramater for the second svar of sys_a. Output of `b`.
      (_ state |output(b,out)|)
    )
  )
)

;; State relation corresponding to the property.
(define-rel |prop(b,1)| sys_b
  (=>
    ( and (_ next |input(b,act)|) (not (_ next |input(b,deact)|)) )
    ( = (_ next |output(b,out)|) (+ (_ state |output(b,out)|) 1) )
  )
)

( verify sys_b (|prop(b,1)|) )
