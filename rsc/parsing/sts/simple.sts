;; node a (in: bool) returns (out: int) ;
;; let
;;   out = (
;;    if in then 1 else 0
;;  ) -> (
;;    if in then pre out + 1 else pre out
;;  ) ;
;;  --%PROPERTY out >= 0 ;
;; tel

;; Defines a state with named state variables.
(define-state state_of_a
  (in Bool) (out Int)
)

;; Defines a initial predicate over some state.
;; Same as
;; > (define-fun init_of_a ((state.in Bool) (state.out Bool)) ...)
;; but allows usage in `define-sys` as first argument (see below).
(define-init init_of_a state_of_a
  (ite (state in) (= (state out) 1) (= (state out) 0))
)

;; Defines a transition predicate over some state.
(define-trans trans_of_a state_of_a
  (ite (next in) (= (next out) (+ (state out) 1)) (= (next out) (state out)))
)

;; Defines a transition system from some initial and transition predicates.
(define-system sys_a state_of_a
  init_of_a
  trans_of_a
)

;; Defines a predicate over a state.
(define-pred out_positive state_of_a
  (>= (state out) 0)
)

;; Check.
( check sys_a (out_positive) )

